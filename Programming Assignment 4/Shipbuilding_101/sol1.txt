using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UIElements;

/// <summary>
/// This script is for the ship movement
/// </summary>
public class Ship : MonoBehaviour
{
Rigidbody2D MyShip;
float ColliderRadius;
Vector2 thrustDirection = new Vector2(1, 0);
const float ThrustForce = 2.5F;
const float RotateDegreesPerSecond=18;
// Start is called before the first frame update
void Start()
{
MyShip = GetComponent<Rigidbody2D>();
ColliderRadius = GetComponent<CircleCollider2D>().radius;
}
// Called when the sprite attached disappears
private void OnBecameInvisible()
{
Vector3 ShipPosition = transform.position;
if(ShipPosition.x > ScreenUtils.GetRightEdge)
{
ShipPosition.x = ScreenUtils.GetLeftEdge - ColliderRadius / 2;
}
else if(ShipPosition.x < ScreenUtils.GetLeftEdge)
{
ShipPosition.x = ScreenUtils.GetRightEdge + ColliderRadius / 2;
}
if(ShipPosition.y > ScreenUtils.GetUpperEdge)
{
ShipPosition.y = ScreenUtils.GetLowerEdge - ColliderRadius / 2;
}
else if(ShipPosition.y < ScreenUtils.GetLowerEdge)
{
ShipPosition.y = ScreenUtils.GetUpperEdge - ColliderRadius / 2;
}
transform.position = ShipPosition;
}
void FixedUpdate()
{
if (Input.GetAxis("Thrust") > 0)
{
MyShip.AddForce(thrustDirection * ThrustForce, ForceMode2D.Force);
}
}

// Update is called once per frame
void Update()
{
transform.Rotate(Vector3.forward, RotateDegreesPerSecond * Time.deltaTime * Input.GetAxis("Rotate"));
float Angle = transform.eulerAngles.z;
Angle = Mathf.Deg2Rad*Angle;
thrustDirection.x = (float)Mathf.Cos(Angle) * ColliderRadius / 2;
thrustDirection.y = (float)Mathf.Sin(Angle) * ColliderRadius / 2;
}
}